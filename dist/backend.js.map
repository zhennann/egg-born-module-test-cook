{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/cook.js","webpack://backend/./backend/src/controller/test.js","webpack://backend/./backend/src/controller/cookPublic.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/version/test.js","webpack://backend/./backend/src/service/version/testData.js","webpack://backend/./backend/src/service/cook.js","webpack://backend/./backend/src/service/cookPublic.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/model/cook.js","webpack://backend/./backend/src/model/cookType.js","webpack://backend/./backend/src/model/cookPublic.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/schemas.js"],"names":[],"mappings":"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AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2DAA2D,8BAA8B;AACzF;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;;AAEA;AACA,kDAAkD,sBAAsB,mBAAmB,EAAE;AAC7F;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA,WAAW;AACX,iBAAiB,wBAAwB;AACzC,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACjgBA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACrBA,gBAAgB,mBAAO,CAAC,EAAsB;AAC9C,aAAa,mBAAO,CAAC,EAAmB;AACxC,mBAAmB,mBAAO,CAAC,EAAyB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;ACfA,sBAAsB,mBAAO,CAAC,EAAmB;;AAEjD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC5EA,iBAAiB,mBAAO,CAAC,EAAe;;AAExC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wDAAwD,WAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wDAAwD,gBAAgB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;;;;;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9CA;;AAEA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA,OAAO;AACP,cAAc;AACd;;AAEA,gBAAgB,6BAA6B;AAC7C;AACA;;AAEA,kBAAkB,kCAAkC;AACpD;AACA;;AAEA,iBAAiB,yCAAyC;AAC1D;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,kBAAkB,+BAA+B;AACjD;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA,SAAS;AACT;AACA;AACA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,OAAO;AACP;;AAEA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC3EA;;AAEA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA,OAAO;AACP,cAAc;AACd;;AAEA,iBAAiB,yCAAyC;AAC1D;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;;;;;;ACxBA,aAAa,mBAAO,CAAC,EAAiB;AACtC,iBAAiB,mBAAO,CAAC,EAAqB;AAC9C,mBAAmB,mBAAO,CAAC,EAAuB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;ACfA;;AAEA;;AAEA;AACA,kBAAkB,8BAA8B,wBAAwB,EAAE;AAC1E;;AAEA;;AAEA;AACA;;;;;;;ACXA;;AAEA;;AAEA;AACA,kBAAkB,kCAAkC,uBAAuB,EAAE;AAC7E;;AAEA;;AAEA;AACA;;;;;;;ACXA;;AAEA;;AAEA;AACA,kBAAkB,oCAAoC,wBAAwB,EAAE;AAChF;;AAEA;;AAEA;AACA;;;;;;;ACXA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,EAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;AACT,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"require3\");","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  'Create Cook': '新建烹饪',\n  'Cook List': '烹饪列表',\n  Cook: '烹饪',\n  Review: '评审',\n  Reviewing: '评审中',\n  Reviewed: '已评审',\n  Breakfast: '早餐',\n  Lunch: '午餐',\n  Dinner: '晚餐',\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","module.exports = {\n};\n","const version = require('./controller/version.js');\nconst cook = require('./controller/cook.js');\nconst test = require('./controller/test.js');\nconst cookPublic = require('./controller/cookPublic.js');\n\nmodule.exports = app => {\n  let routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n  ];\n  if (app.meta.isTest || app.meta.isLocal) {\n    routes = routes.concat([\n      // cook\n      { method: 'post', path: 'cook/create', controller: cook, middlewares: 'inner' },\n      { method: 'post', path: 'cook/read', controller: cook, middlewares: 'inner' },\n      { method: 'post', path: 'cook/select', controller: cook, middlewares: 'inner' },\n      { method: 'post', path: 'cook/write', controller: cook, middlewares: 'inner' },\n      { method: 'post', path: 'cook/delete', controller: cook, middlewares: 'inner' },\n      { method: 'post', path: 'cook/action', controller: cook, middlewares: 'inner' },\n      { method: 'post', path: 'cook/enable', controller: cook, middlewares: 'inner' },\n      { method: 'post', path: 'cook/types', controller: cook },\n      // test echo\n      { method: 'get', path: 'test/echo/:id', controller: test, action: 'echo', middlewares: 'test,transaction' },\n      { method: 'get', path: 'test/echo1', controller: test, middlewares: 'test' },\n      { method: 'get', path: 'test/echo2', controller: test, middlewares: 'test' },\n      // test star label\n      { method: 'get', path: 'test/starlabel', controller: test, middlewares: 'test' },\n      // test atom\n      { method: 'get', path: 'test/atom', controller: test, middlewares: 'test' },\n      // test right atom\n      { method: 'post', path: 'test/checkRightCreate', controller: test, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 1 } },\n      },\n      { method: 'post', path: 'test/checkRightRead', controller: test, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 2 } },\n      },\n      { method: 'post', path: 'test/checkRightWrite', controller: test, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 3 } },\n      },\n      { method: 'post', path: 'test/checkRightAction', controller: test, middlewares: 'test',\n        meta: { right: { type: 'atom', action: 101 } },\n      },\n      // test right function\n      { method: 'post', path: 'test/checkRightFunctionUser', controller: test, middlewares: 'test',\n        meta: { right: { type: 'function', module: 'a-baseadmin', name: 'user' } },\n      },\n      // test function\n      { method: 'get', path: 'test/function', controller: test, action: 'func', middlewares: 'test' },\n      { method: 'get', path: 'test/functionPublic', controller: test, action: 'funcPublic', middlewares: 'test' },\n      // test event: authVerify\n      { method: 'post', path: 'test/eventAuthVerify', controller: test, middlewares: 'test', meta: { auth: { enable: false } } },\n      // test atom public\n      { method: 'get', path: 'test/atomPublic', controller: test, middlewares: 'test' },\n      { method: 'post', path: 'cookPublic/create', controller: cookPublic, middlewares: 'inner' },\n      { method: 'post', path: 'cookPublic/write', controller: cookPublic, middlewares: 'inner' },\n      { method: 'post', path: 'cookPublic/delete', controller: cookPublic, middlewares: 'inner' },\n    ]);\n  }\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","module.exports = app => {\n\n  class CookController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.cook.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.cook.read(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const res = await this.ctx.service.cook.select(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.cook.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.cook.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.cook.action(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.cook.enable(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async types() {\n      const res = await this.ctx.service.cook.types(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n  return CookController;\n};\n\n","const require3 = require('require3');\nconst assert = require3('assert');\n\nmodule.exports = app => {\n\n  class TestController extends app.Controller {\n\n    // right\n\n    async checkRightCreate() {\n      this.ctx.success(this.ctx.request.body);\n    }\n\n    async checkRightRead() {\n      this.ctx.success(this.ctx.request.body);\n    }\n\n    async checkRightWrite() {\n      this.ctx.success(this.ctx.request.body);\n    }\n\n    async checkRightAction() {\n      this.ctx.success(this.ctx.request.body);\n    }\n\n    // function\n\n    async checkRightFunctionUser() {\n      this.ctx.success(this.ctx.request.body);\n    }\n\n    async func() {\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const userTom = { id: userIds.Tom };\n\n      // Tom list all\n      let list = await this.ctx.meta.function.list({\n        options: {\n          where: { 'a.module': 'test-cook' },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: '',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, 2);\n      assert(!list[0].titleLocale);\n\n      // Tom menu list zh-cn\n      list = await this.ctx.meta.function.list({\n        options: {\n          where: { 'a.module': 'test-cook' },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: 'zh-cn',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, 2);\n      assert.notEqual(list[0].title, list[0].titleLocale);\n\n      // hold\n      const function1 = list[0];\n\n      // clear locales\n      await this.ctx.meta.function.clearLocales();\n\n      // select star\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-cook' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert(list.length === 0);\n\n      // star 1\n      await this.ctx.meta.function.star({ id: function1.id, star: 1, user: userTom });\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-cook' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert(list.length === 1);\n\n      // star 0\n      await this.ctx.meta.function.star({ id: function1.id, star: 0, user: userTom });\n      list = await this.ctx.meta.function.list({\n        user: userTom,\n        options: {\n          where: { 'a.module': 'test-cook' },\n          star: 1,\n          page: { index: 0, size: 0 },\n        },\n      });\n      assert(list.length === 0);\n\n      // check\n      list = await this.ctx.meta.function.check({\n        functions: [{ name: function1.name }],\n        user: userTom,\n      });\n      assert(list[0].passed === true);\n\n      this.ctx.success();\n    }\n\n    async funcPublic() {\n\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const userTom = { id: userIds.Tom };\n\n      // check right function\n      const pass = await this.ctx.meta.function.checkRightFunction({ function: { name: 'testPublic' }, user: userTom });\n      assert.equal(!!pass, true);\n\n      // Tom list all\n      const list = await this.ctx.meta.function.list({\n        options: {\n          where: { 'a.module': 'test-cook', 'a.public': 1 },\n          orders: [[ 'id', 'asc' ]],\n          page: { index: 0, size: 0 },\n          locale: '',\n        },\n        user: userTom,\n      });\n      assert.equal(list.length, 1);\n\n      // delete\n      await this.ctx.model.query('delete from aFunction where id=?', [ list[0].id ]);\n\n      this.ctx.success();\n    }\n\n    // echo\n\n    async echo() {\n      const res = await this.ctx.performAction({\n        method: 'get',\n        url: 'test/echo1',\n      });\n      assert(res.user.op.id === this.ctx.user.op.id);\n      assert(res.instance.id === this.ctx.instance.id);\n      assert(JSON.stringify(res.subdomains) === JSON.stringify(this.ctx.subdomains));\n      assert(res.route.action !== this.ctx.route.action);\n      this.ctx.success(res);\n    }\n    async echo1() {\n      const res = await this.ctx.performAction({\n        method: 'get',\n        url: 'test/echo2',\n      });\n      this.ctx.success(res);\n    }\n    async echo2() {\n      this.ctx.success({\n        user: this.ctx.user,\n        instance: this.ctx.instance,\n        subdomains: this.ctx.subdomains,\n        route: this.ctx.route,\n      });\n    }\n\n    // atom\n\n    async starlabel() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'cook' });\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n      const userTom = { id: userIds.Tom };\n\n      // add cook:star\n      const cookKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user: userTom,\n      });\n\n      // get cook\n      let cook = await this.ctx.meta.atom.read({ key: cookKey, user: userTom });\n      assert(!cook.star);\n      assert(!cook.labels);\n\n      // star label\n      await this.ctx.meta.atom.star({ key: cookKey, atom: { star: 1 }, user: userTom });\n      await this.ctx.meta.atom.labels({ key: cookKey, atom: { labels: [ 1 ] }, user: userTom });\n\n      // get cook\n      cook = await this.ctx.meta.atom.read({ key: cookKey, user: userTom });\n      assert(cook.star === 1);\n      assert(cook.labels === '[1]');\n\n      // select cooks\n      let cooks = await this.ctx.meta.atom.select({ user: userTom, options: { star: 1 } });\n      assert(cooks.length === 1);\n      cooks = await this.ctx.meta.atom.select({ user: userTom, options: { label: 1 } });\n      assert(cooks.length === 1);\n      cooks = await this.ctx.meta.atom.select({ user: userTom, options: { label: 2 } });\n      assert(cooks.length === 0);\n\n      // star label\n      await this.ctx.meta.atom.star({ key: cookKey, atom: { star: 0 }, user: userTom });\n      await this.ctx.meta.atom.labels({ key: cookKey, atom: { labels: null }, user: userTom });\n\n      // get cook\n      cook = await this.ctx.meta.atom.read({ key: cookKey, user: userTom });\n      assert(!cook.star);\n      assert(!cook.labels);\n\n      // delete cook\n      await this.ctx.meta.atom.delete({ key: cookKey, user: userTom });\n\n      this.ctx.success();\n    }\n\n    async atom() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'cook' });\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n\n      // // system test\n\n      // user->atom\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ]);\n\n      // // custom test\n\n      // Tom add cook:egg\n      const cookKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user: { id: userIds.Tom },\n      });\n      await this.ctx.meta.atom.write({\n        key: cookKey,\n        item: { atomName: 'egg', cookCount: 3 },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ]);\n\n      // Tom enable cook:egg\n      await this.ctx.meta.atom.enable({\n        key: cookKey,\n        atom: {\n          atomEnabled: 1,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 1 ],\n        [ 'Jimmy', 1 ],\n        [ 'Smith', 1 ],\n      ]);\n\n      // Tom update cook:egg\n      await this.ctx.meta.atom.write({\n        key: cookKey,\n        item: { cookCount: 8 },\n        user: { id: userIds.Tom },\n      });\n\n      // Tom get cook:egg\n      const cook = await this.ctx.meta.atom.read({ key: cookKey, user: { id: userIds.Tom } });\n      assert(cook);\n\n      // Tom list cook:egg\n      const cooks = await this.ctx.meta.atom.select({\n        atomClass,\n        options: {\n          where: { atomName: { val: 'egg', op: 'likeRight' } },\n          orders: [[ 'a.createdAt', 'desc' ]],\n          page: { index: 0, size: 0 },\n        },\n        user: { id: userIds.Tom },\n      });\n      assert.equal(cooks.length, 1);\n\n      // checkRightRead 1\n      const checkRightReads = [[ 'Tom', cookKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert(!!res === right);\n      }\n\n      // checkRightWrite\n      const checkRightWrites = [[ 'Tom', cookKey.atomId, true ], [ 'Tomson', cookKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightWrites) {\n        const res = await this.ctx.meta.atom.checkRightUpdate({\n          atom: { id: atomId, action: this.ctx.constant.module('a-base').atom.action.write },\n          user: { id: userIds[userName] },\n        });\n        assert(!!res === right, `${userIds[userName]}:${userName}`);\n      }\n\n      // checkRightCreate\n      const checkRightCreates = [[ 'Tom', true ], [ 'Jimmy', true ], [ 'Smith', false ]];\n      for (const [ userName, right ] of checkRightCreates) {\n        const res = await this.ctx.meta.atom.checkRightCreate({\n          atomClass,\n          user: { id: userIds[userName] },\n        });\n        assert(!!res === right);\n      }\n\n      // checkRightAction:review(flag=1)\n      const checkRightActions_1 = [[ 'Tom', cookKey.atomId, false ], [ 'Jane', cookKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightActions_1) {\n        const res = await this.ctx.meta.atom.checkRightAction({\n          atom: { id: atomId, action: 101 },\n          user: { id: userIds[userName] },\n        });\n        assert(!!res === right);\n      }\n\n      // action: review\n      await this.ctx.meta.atom.action({\n        action: 101,\n        key: cookKey,\n        user: { id: userIds.Jane },\n      });\n\n      // checkRightAction:review(flag=2)\n      const checkRightActions_2 = [[ 'Tom', 1, false ], [ 'Jane', 1, false ]];\n      for (const [ userName, atomId, right ] of checkRightActions_2) {\n        const res = await this.ctx.meta.atom.checkRightAction({\n          atom: { id: atomId, action: 101 },\n          user: { id: userIds[userName] },\n        });\n        assert(!!res === right);\n      }\n\n      // action: review again\n      try {\n        await this.ctx.meta.atom.action({\n          action: 101,\n          key: cookKey,\n          user: { id: userIds.Jane },\n        });\n      } catch (e) {\n        assert(e.code === 405);\n      }\n\n      // Tom delete cook:egg\n      await this.ctx.meta.atom.delete({\n        key: cookKey,\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ]);\n\n      this.ctx.success();\n    }\n\n    async atomPublic() {\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'cookPublic' });\n      // userIds\n      const userIds = this.ctx.cache.mem.get('userIds');\n\n      // // system test\n\n      // user->atom\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ]);\n\n      // // custom test\n\n      // Tom add test:egg\n      const cookKey = await this.ctx.meta.atom.create({\n        atomClass,\n        user: { id: userIds.Tom },\n      });\n\n      await this.ctx.meta.atom.write({\n        key: cookKey,\n        item: { atomName: 'egg' },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ]);\n\n      // Tom enable cook:egg\n      await this.ctx.meta.atom.enable({\n        key: cookKey,\n        atom: {\n          atomEnabled: 1,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ]);\n\n      // checkRightRead 1\n      let checkRightReads = [[ 'Jane', cookKey.atomId, false ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert(!!res === right);\n      }\n\n      // flow cook:egg\n      await this.ctx.meta.atom.flow({\n        key: cookKey,\n        atom: {\n          atomFlow: 0,\n        },\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 1 ],\n        [ 'Jane', 1 ],\n        [ 'Jimmy', 1 ],\n        [ 'Smith', 1 ],\n      ]);\n\n      // checkRightRead 2\n      checkRightReads = [[ 'Jane', cookKey.atomId, true ]];\n      for (const [ userName, atomId, right ] of checkRightReads) {\n        const res = await this.ctx.meta.atom.checkRightRead({\n          atom: { id: atomId },\n          user: { id: userIds[userName] },\n        });\n        assert(!!res === right);\n      }\n\n      // Tom get cook:egg\n      const cook = await this.ctx.meta.atom.read({ key: cookKey, user: { id: userIds.Jane } });\n      assert(cook);\n\n      // Tom delete cook:egg\n      await this.ctx.meta.atom.delete({\n        key: cookKey,\n        user: { id: userIds.Tom },\n      });\n\n      await this._testCheckList(userIds, [\n        [ 'Tom', 0 ],\n        [ 'Jane', 0 ],\n        [ 'Jimmy', 0 ],\n        [ 'Smith', 0 ],\n      ]);\n\n      this.ctx.success();\n    }\n\n    async eventAuthVerify() {\n      const data = this.ctx.request.body.data;\n      console.log('onUserVerify profileId: ', data.profileUser.profileId);\n      this.ctx.success();\n    }\n\n    async _testCheckList(userIds, userAtoms) {\n      for (const [ userName, atomCountExpected ] of userAtoms) {\n        const list = await this.ctx.meta.atom.select({\n          options: {\n            where: { 'b.module': 'test-cook' },\n            orders: null,\n            page: null,\n          },\n          user: { id: userIds[userName] },\n        });\n        assert.equal(list.length, atomCountExpected);\n      }\n    }\n\n  }\n\n  return TestController;\n};\n","module.exports = app => {\n\n  class CookPublicController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.cookPublic.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.cookPublic.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.cookPublic.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return CookPublicController;\n};\n\n","const version = require('./service/version.js');\nconst cook = require('./service/cook.js');\nconst cookPublic = require('./service/cookPublic.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(services, {\n      cook,\n      cookPublic,\n    });\n  }\n  return services;\n};\n","const VersionTestFn = require('./version/test.js');\n\nmodule.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      if (options.version === 1) {\n        let sql = `\n          CREATE TABLE testCook (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            cookCount int(11) DEFAULT '0',\n            cookTypeId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE TABLE testCookType (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            name varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE VIEW testCookView as\n            select a.*,b.name as cookTypeName from testCook a\n              left join testCookType b on a.cookTypeId=b.id\n        `;\n        await this.ctx.model.query(sql);\n\n        sql = `\n          CREATE TABLE testCookPublic (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        if (this.app.meta.isTest || this.app.meta.isLocal) {\n          // types\n          for (const name of [ 'Breakfast', 'Lunch', 'Dinner' ]) {\n            await this.ctx.model.cookType.insert({ name });\n          }\n        }\n      }\n    }\n\n    async test() {\n      const versionTest = new (VersionTestFn(this.ctx))();\n      await versionTest.run();\n    }\n\n  }\n\n  return Version;\n};\n","\nconst testData = require('./testData.js');\n\nmodule.exports = function(ctx) {\n\n  class VersionTest {\n\n    async run() {\n      const roleIds = await this._testRoles();\n      await this._testRoleIncs(roleIds);\n      await ctx.meta.role.build();\n      const userIds = await this._testUsers(roleIds);\n\n      await this._testRoleRights(roleIds);\n\n      await this._testAuths(userIds);\n\n      this._testCache(roleIds, userIds);\n    }\n\n    _testCache(roleIds, userIds) {\n      ctx.cache.mem.set('roleIds', roleIds);\n      ctx.cache.mem.set('userIds', userIds);\n    }\n\n    // roles\n    async _testRoles() {\n      const roleIds = {};\n      // system roles\n      for (const roleName of ctx.constant.module('a-base').systemRoles) {\n        const role = await ctx.meta.role.getSystemRole({ roleName });\n        roleIds[roleName] = role.id;\n      }\n      // roles\n      for (const [ roleName, leader, catalog, roleNameParent ] of testData.roles) {\n        roleIds[roleName] = await ctx.meta.role.add({\n          roleName,\n          leader,\n          catalog,\n          roleIdParent: roleIds[roleNameParent],\n        });\n      }\n\n      return roleIds;\n    }\n\n    // role incs\n    async _testRoleIncs(roleIds) {\n      for (const [ roleId, roleIdInc ] of testData.roleIncs) {\n        await ctx.meta.role.addRoleInc({\n          roleId: roleIds[roleId],\n          roleIdInc: roleIds[roleIdInc],\n        });\n      }\n    }\n\n    // users\n    async _testUsers(roleIds) {\n      const userIds = {};\n      for (const [ userName, roleName ] of testData.users) {\n        userIds[userName] = await ctx.meta.user.add({\n          userName,\n          realName: userName,\n        });\n        await ctx.meta.role.addUserRole({\n          userId: userIds[userName],\n          roleId: roleIds[roleName],\n        });\n      }\n      // root\n      const userRoot = await ctx.meta.user.get({ userName: 'root' });\n      userIds.root = userRoot.id;\n      return userIds;\n    }\n\n    // role rights\n    async _testRoleRights(roleIds) {\n      const module = ctx.app.meta.modules[ctx.module.info.relativeName];\n      for (const [ roleName, atomClassName, actionName, scopeNames ] of testData.roleRights) {\n        const atomClass = await ctx.meta.atomClass.get({ atomClassName });\n        await ctx.meta.role.addRoleRight({\n          roleId: roleIds[roleName],\n          atomClassId: atomClass.id,\n          action: ctx.constant.module('a-base').atom.action[actionName] || module.main.meta.base.atoms[atomClassName]\n            .actions[actionName].code,\n          scope: scopeNames ? scopeNames.split(',').map(scopeName => roleIds[scopeName]) : 0,\n        });\n      }\n    }\n\n    // auths\n    async _testAuths(userIds) {\n      for (const userName in userIds) {\n        await ctx.performAction({\n          method: 'post',\n          url: '/a/authsimple/auth/add',\n          body: {\n            userId: userIds[userName],\n            password: '',\n          },\n        });\n      }\n    }\n\n  }\n\n  return VersionTest;\n};\n","// roleName, leader, catalog, roleNameParent\nconst roles = [\n  [ 'friend', 0, 0, 'external' ],\n  [ 'consultant', 0, 1, 'external' ],\n  [ 'study', 0, 0, 'consultant' ],\n  [ 'work', 0, 0, 'consultant' ],\n  [ 'life', 0, 0, 'consultant' ],\n  [ 'family', 0, 1, 'internal' ],\n  [ 'father', 0, 0, 'family' ],\n  [ 'mother', 1, 0, 'family' ],\n  [ 'son', 0, 0, 'family' ],\n  [ 'daughter', 0, 0, 'family' ],\n];\n\n// friend->family\nconst roleIncs = [\n  [ 'friend', 'family' ],\n];\n\n// family and friend\n//   userName, roleName\nconst users = [\n  [ 'Tom', 'father' ], [ 'Jane', 'mother' ], [ 'Tomson', 'son' ], [ 'Jannie', 'daughter' ],\n  [ 'Jimmy', 'friend' ], [ 'Rose', 'friend' ],\n  [ 'Smith', 'life' ],\n];\n\n// roleRights\nconst roleRights = [\n  [ 'superuser', 'cook', 'create' ],\n  [ 'superuser', 'cook', 'read', 'family' ],\n  [ 'superuser', 'cook', 'review', 'family' ],\n  [ 'superuser', 'cook', 'review', 'authenticated' ],\n  [ 'family', 'cook', 'create' ],\n  [ 'family', 'cook', 'read', 'family' ],\n  [ 'mother', 'cook', 'review', 'family' ],\n  [ 'authenticated', 'cook', 'write', 0 ],\n  [ 'authenticated', 'cook', 'delete', 0 ],\n  [ 'consultant', 'cook', 'read', 'family' ],\n];\n\nmodule.exports = {\n  roles,\n  roleIncs,\n  users,\n  roleRights,\n};\n","module.exports = app => {\n\n  class Cook extends app.Service {\n\n    async create({ atomClass, key, item, user }) {\n      // add cook\n      const res = await this.ctx.model.cook.insert({\n        atomId: key.atomId,\n      });\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    async read({ atomClass, key, item, user }) {\n      // read\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // select\n    }\n\n    async write({ atomClass, key, item, validation, user }) {\n      // update cook\n      const res = await this.ctx.model.cook.update({\n        id: key.itemId,\n        cookCount: item.cookCount,\n        cookTypeId: item.cookTypeId,\n      });\n      if (res.affectedRows !== 1) this.ctx.throw.module('a-base', 1003);\n    }\n\n    async delete({ atomClass, key, user }) {\n      // delete cook\n      const res = await this.ctx.model.cook.delete({\n        id: key.itemId,\n      });\n      if (res.affectedRows !== 1) this.ctx.throw.module('a-base', 1003);\n    }\n\n    async action({ action, atomClass, key, user }) {\n      if (action === 101) {\n        // change flag\n        await this.ctx.meta.atom.flag({\n          key,\n          atom: { atomFlag: 2 },\n          user,\n        });\n        return 'reviewed';\n      }\n    }\n\n    async enable({ atomClass, key, atom, user }) {\n      // enable\n      const atomFlag = atom.atomEnabled ? 1 : 0;\n      // change flag\n      await this.ctx.meta.atom.flag({\n        key,\n        atom: { atomFlag },\n        user,\n      });\n    }\n\n    async types({ empty }) {\n      const items = await this.ctx.model.cookType.select();\n      for (const item of items) {\n        item.name = this.ctx.text(item.name);\n      }\n      if (empty) {\n        items.unshift({ id: 0, name: '' });\n      }\n      return items;\n    }\n\n  }\n\n  return Cook;\n};\n","module.exports = app => {\n\n  class CookPublic extends app.Service {\n\n    async create({ atomClass, key, item, user }) {\n      const res = await this.ctx.model.cookPublic.insert({\n        atomId: key.atomId,\n      });\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    async write({ atomClass, key, item, validation, user }) {\n    }\n\n    async delete({ atomClass, key, user }) {\n      const res = await this.ctx.model.cookPublic.delete({\n        id: key.itemId,\n      });\n      if (res.affectedRows !== 1) this.ctx.throw.module('a-base', 1003);\n    }\n\n  }\n\n  return CookPublic;\n};\n","const cook = require('./model/cook.js');\nconst cookType = require('./model/cookType.js');\nconst cookPublic = require('./model/cookPublic.js');\n\nmodule.exports = app => {\n  const models = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    Object.assign(models, {\n      cook,\n      cookType,\n      cookPublic,\n    });\n  }\n  return models;\n};\n","module.exports = app => {\n\n  class Cook extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testCook', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return Cook;\n};\n","module.exports = app => {\n\n  class CookType extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testCookType', options: { disableDeleted: true } });\n    }\n\n  }\n\n  return CookType;\n};\n","module.exports = app => {\n\n  class CookPublic extends app.meta.Model {\n\n    constructor(ctx) {\n      super(ctx, { table: 'testCookPublic', options: { disableDeleted: false } });\n    }\n\n  }\n\n  return CookPublic;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n  const meta = {\n  };\n  if (app.meta.isTest || app.meta.isLocal) {\n    // schemas\n    const schemas = require('./config/validation/schemas.js')(app);\n    // meta\n    extend(true, meta, {\n      base: {\n        atoms: {\n          cook: {\n            info: {\n              title: 'Cook',\n              tableName: 'testCookView',\n            },\n            actions: {\n              review: {\n                code: 101,\n                title: 'Review',\n                flag: '1',\n              },\n            },\n            flags: {\n              1: {\n                title: 'Reviewing',\n              },\n              2: {\n                title: 'Reviewed',\n              },\n            },\n            validator: 'cook',\n            search: {\n              validator: 'cookSearch',\n            },\n          },\n        },\n        functions: {\n          createCook: {\n            title: 'Create Cook',\n            scene: 'create',\n            autoRight: 1,\n            atomClassName: 'cook',\n            action: 'create',\n            sorting: 1,\n            menu: 1,\n          },\n          listCook: {\n            title: 'Cook List',\n            scene: 'list',\n            autoRight: 1,\n            atomClassName: 'cook',\n            action: 'read',\n            sorting: 1,\n            menu: 1,\n          },\n        },\n      },\n      validation: {\n        validators: {\n          cook: {\n            schemas: 'cook',\n          },\n          cookSearch: {\n            schemas: 'cookSearch',\n          },\n        },\n        keywords: {},\n        schemas: {\n          cook: schemas.cook,\n          cookSearch: schemas.cookSearch,\n        },\n      },\n    });\n  }\n  if (app.meta.isTest) {\n    // meta\n    extend(true, meta, {\n      base: {\n        atoms: {\n          cookPublic: {\n            info: {\n              tableName: 'testCookPublic',\n              public: 1,\n              flow: 1,\n            },\n          },\n        },\n        functions: {\n          testPublic: {\n            scene: 'tools',\n            menu: 1,\n            public: 1,\n          },\n        },\n      },\n      event: {\n        implementations: {\n          'a-base:authVerify': 'test/eventAuthVerify',\n        },\n      },\n    });\n  }\n  return meta;\n};\n","module.exports = app => {\n  const schemas = {};\n  // cook\n  schemas.cook = {\n    type: 'object',\n    properties: {\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Cook Name',\n        notEmpty: true,\n      },\n      cookCount: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Cook Count',\n        notEmpty: true,\n      },\n      cookTypeId: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Cook Type',\n        ebOptionsUrl: '/test/cook/cook/types',\n        ebOptionsUrlParams: { empty: true },\n        ebOptionTitleKey: 'name',\n        ebOptionValueKey: 'id',\n        notEmpty: true,\n      },\n    },\n  };\n  // cook search\n  schemas.cookSearch = {\n    type: 'object',\n    properties: {\n      cookTypeId: {\n        type: 'number',\n        ebType: 'select',\n        ebTitle: 'Cook Type',\n        ebOptionsUrl: '/test/cook/cook/types',\n        ebOptionsUrlParams: { empty: true },\n        ebOptionTitleKey: 'name',\n        ebOptionValueKey: 'id',\n      },\n    },\n  };\n\n  return schemas;\n};\n"],"sourceRoot":""}